name: Compile The New Version OpenClash

on: 
  push:
    branches:
      - dev
    paths:
      - 'luci-app-openclash/Makefile'
  workflow_dispatch:

jobs:
  Get-Version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      current_version: ${{ steps.current_version.outputs.version }}
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: New Version
        id: version
        run: |
          echo "version=$(grep 'PKG_VERSION:=' ./luci-app-openclash/Makefile |awk -F '=' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          ref: package

      - name: Current Version
        id: current_version
        run: |
          echo "version=$(sed -n 1p ./${{ github.ref_name }}/version |awk -F 'v' '{print $2}')" >> $GITHUB_OUTPUT

  Compile:
    runs-on: ubuntu-latest
    needs: Get-Version
    if: ${{ needs.Get-Version.outputs.version != needs.Get-Version.outputs.current_version }}
    strategy:
      matrix:
        target:
          - { 
              name: ipk, 
              sdk_url: "https://downloads.openwrt.org/releases/24.10.3/targets/ramips/mt7620/openwrt-sdk-24.10.3-ramips-mt7620_gcc-13.3.0_musl.Linux-x86_64.tar.zst", 
              sdk_tar: "SDK.tar.zst", 
              sdk_dir: "SDK", 
              artifact_pattern: "luci-app-openclash_*.ipk",
              arch: "mipsel_24kc"  # 添加架构信息
            }
          - { 
              name: apk, 
              sdk_url: "snapshot", 
              sdk_tar: "SNAPSDK.tar.zst", 
              sdk_dir: "SNAPSDK", 
              artifact_pattern: "luci-app-openclash-*.apk",
              arch: "x86_64"  # 保持原来的架构
            }
    steps:
      - name: Checkout OpenClash Source
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Install Dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get -y install curl git tar zstd python3 python3-pyelftools python3-setuptools build-essential

      - name: Download SDK
        run: |
          mkdir -p tmp
          if [ "${{ matrix.target.name }}" = "ipk" ]; then
            echo "下载 ramips/mt7620 SDK..."
            curl -SLk --connect-timeout 30 --retry 2 "${{ matrix.target.sdk_url }}" -o "./tmp/${{ matrix.target.sdk_tar }}"
            cd tmp
            # 使用 zstd 解压 .zst 文件
            zstd -d ${{ matrix.target.sdk_tar}} -o sdk.tar
            tar xf sdk.tar
            # 查找解压后的目录名
            SDK_DIR=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*" | head -1)
            if [ -n "$SDK_DIR" ]; then
              mv "$SDK_DIR" "${{ matrix.target.sdk_dir }}"
              echo "SDK 目录: $SDK_DIR -> ${{ matrix.target.sdk_dir }}"
            else
              echo "错误: 未找到 SDK 目录"
              exit 1
            fi
          else
            echo "下载 snapshot SDK..."
            BASE_URL="https://downloads.openwrt.org/snapshots/targets/x86/64/"
            SDK_NAME=$(curl -s $BASE_URL | grep -oE 'openwrt-sdk-x86-64[^"]+\.tar\.zst' | head -n 1)
            curl -SLk --connect-timeout 30 --retry 2 "$BASE_URL/$SDK_NAME" -o "./tmp/${{ matrix.target.sdk_tar }}"
            cd tmp
            zstd -d ${{ matrix.target.sdk_tar}} -o snapshot.tar
            tar xf snapshot.tar
            SDK_DIR=$(tar tf snapshot.tar | head -n 1 | cut -d/ -f1)
            mv "$SDK_DIR" "${{ matrix.target.sdk_dir }}"
          fi

      - name: Copy OpenClash Source Codes
        run: |
          mkdir -p tmp/${{ matrix.target.sdk_dir }}/package/luci-app-openclash
          cp -rf ./luci-app-openclash/. tmp/${{ matrix.target.sdk_dir }}/package/luci-app-openclash/

      - name: Setup SDK Environment
        run: |
          cd tmp/${{ matrix.target.sdk_dir }}
          # 更新 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # 安装必要的依赖
          ./scripts/feeds install luci-base
          ./scripts/feeds install luci-compat

      - name: Compile po2lmo
        run: |
          cd tmp/${{ matrix.target.sdk_dir }}/package/luci-app-openclash/tools/po2lmo
          make && sudo make install

      - name: Compile OpenClash
        run: |
          cd tmp/${{ matrix.target.sdk_dir }}
          # 配置编译环境
          cat > .config << EOF
CONFIG_TARGET_ramips=${{ matrix.target.name == 'ipk' && 'y' || 'n' }}
CONFIG_TARGET_ramips_mt7620=${{ matrix.target.name == 'ipk' && 'y' || 'n' }}
CONFIG_TARGET_x86=${{ matrix.target.name == 'apk' && 'y' || 'n' }}
CONFIG_TARGET_x86_64=${{ matrix.target.name == 'apk' && 'y' || 'n' }}
CONFIG_PACKAGE_luci-app-openclash=m
CONFIG_PACKAGE_luci-base=m
CONFIG_PACKAGE_luci-compat=m
EOF
          make defconfig
          make package/luci-app-openclash/compile V=99

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openclash-${{ matrix.target.name }}
          # 根据架构选择正确的路径
          path: tmp/${{ matrix.target.sdk_dir }}/bin/packages/${{ matrix.target.arch }}/base/${{ matrix.target.artifact_pattern }}

  Post-Process:
    runs-on: ubuntu-latest
    needs: [Compile, Get-Version]
    steps:
      - name: Checkout package branch
        uses: actions/checkout@v4
        with:
          ref: package

      - name: Download IPK Artifact
        uses: actions/download-artifact@v4
        with:
          name: openclash-ipk
          path: ./

      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: openclash-apk
          path: ./

      - name: Commit and Push New Version
        run: |
          rm -rf ./${{ github.ref_name }}/luci-app-openclash*
          echo "v${{ needs.Get-Version.outputs.version }}" > ./${{ github.ref_name }}/version
          echo "https://img.shields.io/badge/New Release-v${{ needs.Get-Version.outputs.version }}-orange.svg" >> ./${{ github.ref_name }}/version
          cp ./luci-app-openclash_*.ipk "./${{ github.ref_name }}/"
          cp ./luci-app-openclash-*.apk "./${{ github.ref_name }}/"
          rm -f ./luci-app-openclash_*.ipk
          rm -f ./luci-app-openclash-*.apk
          sed -i -E "s/OpenClash\/tree\/v(.*)/OpenClash\/tree\/v${{ needs.Get-Version.outputs.version }}/g" ./${{ github.ref_name }}/README.md
          sed -i -E "s/OpenClash\/releases\/tag\/v(.*)/OpenClash\/releases\/tag\/v${{ needs.Get-Version.outputs.version }}/g" ./${{ github.ref_name }}/README.md
          sed -i -E "s/source code-v(.*)-green/source code-v${{ needs.Get-Version.outputs.version }}-green/g" ./${{ github.ref_name }}/README.md
          sed -i -E "s/New Release-v(.*)-orange/New Release-v${{ needs.Get-Version.outputs.version }}-orange/g" ./${{ github.ref_name }}/README.md
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "Auto Release: v${{ needs.Get-Version.outputs.version }}"
          git push
